// <auto-generated />
using System;
using CarBazaar.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarBazaar.Data.Migrations
{
    [DbContext(typeof(CarBazaarDbContext))]
    [Migration("20241217184123_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarBazaar.Data.Models.CarBazaarUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-user",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d022a220-a363-4a57-9b35-0fe69d6c9718",
                            CreatedAt = new DateTime(2024, 12, 17, 18, 41, 23, 2, DateTimeKind.Utc).AddTicks(3827),
                            Email = "admin@carbazaar.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@CARBAZAAR.COM",
                            NormalizedUserName = "ADMIN@CARBAZAAR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECP1ss1UZyLC398VvaKVGNXFwwl5I3Yc3VXDFvvtEPAoM7rGId2dmxyjgh0//UVnTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9cd28ae-f6cb-4643-b70f-bade32f47216",
                            TwoFactorEnabled = false,
                            UserName = "admin@carbazaar.com"
                        },
                        new
                        {
                            Id = "user-1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94fe044d-e007-4fa6-9c5b-f81ac9b42988",
                            CreatedAt = new DateTime(2024, 12, 17, 18, 41, 23, 69, DateTimeKind.Utc).AddTicks(3522),
                            Email = "bojidar.stoi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOJIDAR.STOI@GMAIL.COM",
                            NormalizedUserName = "BOJIDAR.STOI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ8CVAkKdcmAwm6eB4w9MjyonnlBCDXdRQDG067tSjbzH7andD0zp3WRa4pBqmJ8dA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c6b97d2-cb92-4961-8565-ce38688e6d57",
                            TwoFactorEnabled = false,
                            UserName = "bojidar.stoi@gmail.com"
                        },
                        new
                        {
                            Id = "user-2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fcaa037a-933d-41be-84ba-ebaedb7b4b31",
                            CreatedAt = new DateTime(2024, 12, 17, 18, 41, 23, 131, DateTimeKind.Utc).AddTicks(2242),
                            Email = "john.wick@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.WICK@ABV.BG",
                            NormalizedUserName = "JOHN.WICK@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEJcTK+CQeGa09wVevG+uWoc/+ZJjcaEMfRa7mrlyx1R29BYmpviQ1FMY+4X/J6lEFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5d2b218-15e2-42ff-854d-875b59ea3ad1",
                            TwoFactorEnabled = false,
                            UserName = "john.wick@abv.bg"
                        });
                });

            modelBuilder.Entity("CarBazaar.Data.Models.CarListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Car Listing Identifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Car Brand");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Car Color");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Extra Car Info");

                    b.Property<string>("Gearbox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Car Gearbox");

                    b.Property<int>("Horsepower")
                        .HasColumnType("int")
                        .HasComment("Car Horsepower");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image URL");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("Km")
                        .HasColumnType("bigint")
                        .HasComment("Car KM");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Car Listing Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Car Price");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int")
                        .HasComment("Car Production Year");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Listing Publication Date");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Seller Id");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Car State");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Car Type");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("CarListings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Brand = "Toyota",
                            Color = "White",
                            ExtraInfo = "Well maintained, low mileage.",
                            Gearbox = "Automatic",
                            Horsepower = 130,
                            ImageURL = "https://scene7.toyota.eu/is/image/toyotaeurope/cors0005a_web_2023:Medium-Landscape?ts=1708962012070&resMode=sharp2&op_usm=1.75,0.3,2,0",
                            IsDeleted = false,
                            Km = 80000L,
                            Name = "Toyota Corolla",
                            Price = 15000m,
                            ProductionYear = 2018,
                            PublicationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SellerId = "user-1",
                            State = "Used",
                            Type = "Sedan"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Brand = "BMW",
                            Color = "Black",
                            ExtraInfo = "Luxury package included.",
                            Gearbox = "Automatic",
                            Horsepower = 300,
                            ImageURL = "https://media.ed.edmunds-media.com/bmw/x5/2025/oem/2025_bmw_x5_4dr-suv_xdrive40i_fq_oem_1_1280.jpg",
                            IsDeleted = false,
                            Km = 5000L,
                            Name = "BMW X5",
                            Price = 50000m,
                            ProductionYear = 2022,
                            PublicationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SellerId = "user-2",
                            State = "New",
                            Type = "SUV"
                        });
                });

            modelBuilder.Entity("CarBazaar.Data.Models.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Car Listing Id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Message");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Receiver Id");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Sender Id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasComment("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CarListingId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ceb3623-7822-4af8-a7fa-eed8da9f5c9c"),
                            CarListingId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Message = "Is the car still available?",
                            ReceiverId = "user-2",
                            SenderId = "user-1",
                            Timestamp = new DateTime(2024, 12, 17, 18, 41, 23, 193, DateTimeKind.Utc).AddTicks(2536)
                        });
                });

            modelBuilder.Entity("CarBazaar.Data.Models.FavouriteCarListing", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Id");

                    b.Property<Guid>("CarListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Car Listing Id");

                    b.HasKey("UserId", "CarListingId");

                    b.HasIndex("CarListingId");

                    b.ToTable("FavoriteCarListings");

                    b.HasData(
                        new
                        {
                            UserId = "user-1",
                            CarListingId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("CarBazaar.Data.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Notification identifier");

                    b.Property<Guid>("CarListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Car Listing Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Notificaiton Message");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Sender Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Id");

                    b.HasKey("Id");

                    b.HasIndex("CarListingId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fba8f601-1cfe-4d7e-b60f-e0189942c549"),
                            CarListingId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2024, 12, 17, 18, 41, 23, 193, DateTimeKind.Utc).AddTicks(5964),
                            IsRead = false,
                            Message = "You have a new message from bojidar.stoi@gmail.com.",
                            SenderId = "user-1",
                            UserId = "user-2"
                        });
                });

            modelBuilder.Entity("CarBazaar.Data.Models.UserCarListing", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Id");

                    b.Property<Guid>("CarListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Car Listing Id");

                    b.HasKey("UserId", "CarListingId");

                    b.HasIndex("CarListingId");

                    b.ToTable("UserCarListings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarBazaar.Data.Models.CarListing", b =>
                {
                    b.HasOne("CarBazaar.Data.Models.CarBazaarUser", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("CarBazaar.Data.Models.ChatMessage", b =>
                {
                    b.HasOne("CarBazaar.Data.Models.CarListing", "CarListing")
                        .WithMany()
                        .HasForeignKey("CarListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarBazaar.Data.Models.CarBazaarUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarBazaar.Data.Models.CarBazaarUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarListing");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CarBazaar.Data.Models.FavouriteCarListing", b =>
                {
                    b.HasOne("CarBazaar.Data.Models.CarListing", "CarListing")
                        .WithMany()
                        .HasForeignKey("CarListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarBazaar.Data.Models.CarBazaarUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarListing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarBazaar.Data.Models.Notification", b =>
                {
                    b.HasOne("CarBazaar.Data.Models.CarListing", "CarListing")
                        .WithMany()
                        .HasForeignKey("CarListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarBazaar.Data.Models.CarBazaarUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarBazaar.Data.Models.CarBazaarUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarListing");

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarBazaar.Data.Models.UserCarListing", b =>
                {
                    b.HasOne("CarBazaar.Data.Models.CarListing", "CarListing")
                        .WithMany()
                        .HasForeignKey("CarListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarBazaar.Data.Models.CarBazaarUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarListing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarBazaar.Data.Models.CarBazaarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarBazaar.Data.Models.CarBazaarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarBazaar.Data.Models.CarBazaarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarBazaar.Data.Models.CarBazaarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
